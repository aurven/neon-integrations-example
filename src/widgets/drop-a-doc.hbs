<!DOCTYPE html>
<html lang="en">
  <head>
    
    <!-- 
      This is the main Handlebars template for the site 
      - When the user visits the homepage or submits a color the app calls the endpoints in server.js
      - The server script passes data in here and the Handlebars code builds it into the HTML page
    -->
    
    <meta charset="utf-8" />
    <link rel="icon" href="https://glitch.com/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>{{seo.title}}</title>
    
    <!-- Meta tags for SEO and social sharing -->
    <link rel="canonical" href="{{seo.url}}">
    <meta name="description" content="{{seo.description}}">
    <meta property="og:title" content="{{seo.title}}">
    <meta property="og:type" content="article">
    <meta property="og:url" content="{{seo.url}}">
    <meta property="og:description" content="{{seo.description}}">
    <meta property="og:image" content="{{seo.image}}">
    <meta name="twitter:card" content="summary">

    <!-- Import the webpage's stylesheet -->
    <link rel="stylesheet" href="/style.css" /> 
    <link href="https://unpkg.com/filepond@^4/dist/filepond.css" rel="stylesheet" />
  </head>
  <body>
    <div class="wrapper">
      <div class="content" role="main">
        <h2 class="">Import a file, create an experience</h2>
        
        <!-- Dropper -->
        <form id="dropADoc" method="post">
          <input type="file" />
        </form>
          
        <!-- Progress Message Container -->
        <div id="progressContainer" class="progress-container">
          <div id="progressMessage" class="progress-message"></div>
          <div id="progressButtons" class="progress-buttons"></div>
        </div>
      </div>
    </div>
    <!-- The footer holds our remix button ‚Äî you can use it for structure or cut it out ‚úÇ -->
    <footer class="footer" hidden>
      <div class="links">Eidosmedia S.p.a. - 2025</div>
      
    </footer>
    <script src="https://unpkg.com/filepond@^4/dist/filepond.js"></script>
    <script>
      let interval;
      
      // Progress Message API
      class ProgressMessageAPI {
        constructor(containerId, messageId, buttonsId) {
          this.container = document.getElementById(containerId);
          this.messageEl = document.getElementById(messageId);
          this.buttonsEl = document.getElementById(buttonsId);
          this.isVisible = false;
        }

        show() {
          if (!this.isVisible) {
            this.container.classList.add('show');
            this.isVisible = true;

            setTimeout(() => {
              this.messageEl.classList.add('show');
              this.buttonsEl.classList.add('show');
            }, 100);
          }
          return this;
        }

        hide() {
          this.messageEl.classList.remove('show');
          this.buttonsEl.classList.remove('show');

          setTimeout(() => {
            this.container.classList.remove('show');
            this.isVisible = false;
          }, 300);

          return this;
        }

        updateMessage(message) {
          if (this.messageEl.classList.contains('show')) {
            this.messageEl.classList.remove('show');

            setTimeout(() => {
              this.messageEl.innerHTML = message;
              this.messageEl.classList.add('show');
            }, 200);
          } else {
            this.messageEl.innerHTML = message;
          }
          return this;
        }

        setStyle(style) {
          this.container.className = 'progress-container show';
          if (style && style !== 'default') {
            this.container.classList.add(style);
          }
          return this;
        }

        clearButtons() {
          if (this.buttonsEl.classList.contains('show')) {
            this.buttonsEl.classList.remove('show');
            setTimeout(() => {
              this.buttonsEl.innerHTML = '';
            }, 150);
          } else {
            this.buttonsEl.innerHTML = '';
          }
          return this;
        }

        addButton(text, onclick, style = 'primary') {
          const button = document.createElement('button');
          button.textContent = text;
          button.className = `progress-btn ${style}`;
          button.onclick = onclick;
          this.buttonsEl.appendChild(button);
          return this;
        }

        update(options = {}) {
          const hasMessage = options.message !== undefined;
          const hasButtons = options.buttons !== undefined;
          const hasStyle = options.style !== undefined;

          if (hasStyle) {
            this.setStyle(options.style);
          }

          if (hasMessage) {
            this.updateMessage(options.message);
          }

          if (hasButtons) {
            if (this.buttonsEl.classList.contains('show')) {
              this.buttonsEl.classList.remove('show');
              setTimeout(() => {
                this.buttonsEl.innerHTML = '';
                options.buttons.forEach(btn => {
                  this.addButton(btn.text, btn.onclick, btn.style || 'primary');
                });
                this.buttonsEl.classList.add('show');
              }, 150);
            } else {
              this.buttonsEl.innerHTML = '';
              options.buttons.forEach(btn => {
                this.addButton(btn.text, btn.onclick, btn.style || 'primary');
              });
              setTimeout(() => {
                this.buttonsEl.classList.add('show');
              }, hasMessage ? 300 : 100);
            }
          }

          if (options.show !== false && !this.isVisible) {
            this.show();
          }

          return this;
        }
      }
      
      // Initialize the Progress Message API
      const progressAPI = new ProgressMessageAPI('progressContainer', 'progressMessage', 'progressButtons');
      
      
      // Progress Demo Sequence
      class ProgressDemoSequence {
        constructor() {
          this.step = 0;
          this.timeoutId = null;
          this.isRunning = false;
          this.onComplete = null;
          this.onInterrupt = null;

          this.steps = [
            {
              message: 'üéâ File uploaded <strong>successfully</strong>! Processing...',
              style: 'default',
              delay: 5000
            },
            {
              message: '‚è≥ Contacting <strong>Transcription</strong> service...',
              style: 'default',
              delay: 3000
            },
            {
              message: '‚è≥ <strong>Transcription</strong> in progress...',
              style: 'default',
              delay: 15000
            },
            {
              message: '‚è≥ Arranging <strong>text</strong> content...',
              style: 'default',
              delay: 20000
            },
            {
              message: '‚è≥ Generating <strong>Headline</strong>, <strong>Summary</strong> and relevant <strong>Metadata</strong>...',
              style: 'default',
              delay: 10000
            },
            {
              message: '‚è≥ Generating <strong>Story object</strong>...',
              style: 'default',
              delay: 6000
            },
            {
              message: '‚è≥ Almost there!',
              style: 'default',
              delay: 3000
            },
            {
              message: '‚è≥ Any second now!',
              style: 'default',
              delay: 2000
            },
            {
              message: '‚è≥ Did you know that all good things come with time?',
              style: 'default',
              delay: 4000
            },
          ];
        }

        start(onComplete = null, onInterrupt = null) {
          if (this.isRunning) {
            console.warn('Sequence is already running');
            return false;
          }

          this.step = 0;
          this.isRunning = true;
          this.onComplete = onComplete;
          this.onInterrupt = onInterrupt;

          this.showNextStep();
          return true;
        }

        stop(reason = 'manual') {
          if (!this.isRunning) {
            return false;
          }

          this.isRunning = false;

          if (this.timeoutId) {
            clearTimeout(this.timeoutId);
            this.timeoutId = null;
          }

          console.log(`Demo sequence stopped: ${reason}`);

          // Call interrupt callback if provided
          if (this.onInterrupt) {
            this.onInterrupt(reason, this.step);
          }

          return true;
        }

        showNextStep() {
          if (!this.isRunning || this.step >= this.steps.length) {
            if (this.isRunning) {
              // Sequence completed naturally
              this.isRunning = false;
              if (this.onComplete) {
                this.onComplete();
              }
            }
            return;
          }

          progressAPI.update(this.steps[this.step]);

          // Schedule next step
          if (this.step + 1 < this.steps.length) {
            this.timeoutId = setTimeout(() => {
              this.step++;
              this.showNextStep();
            }, this.steps[this.step].delay);
          } else {
            this.step++;
          }
        }

        getCurrentStep() {
          return this.step;
        }

        getTotalSteps() {
          return this.steps.length;
        }

        getProgress() {
          return {
            current: this.step,
            total: this.steps.length,
            percentage: Math.round((this.step / this.steps.length) * 100)
          };
        }
      }
      
      // Global instance
      let progressDemo = null;

      // Start the demo sequence
      function demoProgressStates() {
        // Stop any existing sequence
        if (progressDemo) {
          progressDemo.stop('new_sequence');
        }

        progressDemo = new ProgressDemoSequence();

        progressDemo.start(
          // onComplete callback
          () => {
            console.log('Demo sequence completed successfully');
          },
          // onInterrupt callback
          (reason, step) => {
            console.log(`Demo sequence interrupted at step ${step}. Reason: ${reason}`);
          }
        );

        return progressDemo;
      }

      // External method to stop the demo
      function stopDemoProgress(reason = 'external_event') {
        if (progressDemo && progressDemo.isRunning) {
          return progressDemo.stop(reason);
        }
        return false;
      }

      // Additional utility functions
      function getDemoProgress() {
        return progressDemo ? progressDemo.getProgress() : null;
      }

      function isDemoRunning() {
        return progressDemo ? progressDemo.isRunning : false;
      }
      
      
      // Get a reference to the file input element
      const inputElement = document.querySelector('input[type="file"]');

      // Create a FilePond instance
      const pond = FilePond.create(inputElement, {
        allowMultiple: true,
        acceptedFileTypes: [
          // "application/msword", //.doc
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document", //.docx
          // "application/zip", //.zip
          // "application/x-7z-compressed", //.7z
          // "application/vnd.rar", //.rar
          // "application/gzip", //.gz
          // "application/x-gzip", //.gz (from Mac and Windows)
          // "application/x-tar", //.tar
          "audio/mpeg", //.mp3
          "audio/ogg", //.ogg / .oga
        ],
        server: {
          // process: "./drop/upload",
          revert: null,
          // onload: (response) => { console.log(response.data) },
          process: (fieldName, file, metadata, load, error, progress, abort, transfer, options) => {
              // fieldName is the name of the input field
              // file is the actual file object to send
              const formData = new FormData();
              formData.append(fieldName, file, file.name);

              const request = new XMLHttpRequest();
              request.open('POST', './drop/upload');

              // Should call the progress method to update the progress to 100% before calling load
              // Setting computable to false switches the loading indicator to infinite mode
              request.upload.onprogress = (e) => {
                  console.log('Progress: ', e.loaded, e.total);
                  progress(false, e.loaded, e.total);
                  
                  // Update progress message
                  const percentage = Math.round((e.loaded / e.total) * 100);
                  progressAPI.updateMessage(
                    `üìä Uploading <em>${file.name}</em>... <strong>${percentage}</strong>% complete.`
                  );
                
                  if (percentage === 100) {
                    // Add messages while waiting
                    demoProgressStates()
                  }
              };

              // Should call the load method when done and pass the returned server file id
              // this server file id is then used later on when reverting or restoring a file
              // so your server knows which file to return without exposing that info to the client
              request.onload = function () {
                  stopDemoProgress();
                
                  if (request.status >= 200 && request.status < 300) {
                      // Upload successful
                      const responseJson = JSON.parse(request.response);
                      const familyRef = responseJson.neon[0];
                    
                      progressAPI.update({
                        message: `üéâ <em>${file.name}</em> processed </strong>successfully</strong>!`,
                        style: 'success',
                        buttons: [
                          {
                            text: 'Open your new Story',
                            style: 'success',
                            onclick: () => {
                              window.open(`{{neonAppUrl}}/neon/app/neon.html#open/${familyRef}`);
                            }
                          },
                          {
                            text: 'Upload Another',
                            style: 'secondary',
                            onclick: () => {
                              pond.removeFiles();
                              progressAPI.hide();
                            }
                          }
                        ]
                      });
                      
                      // the load method accepts either a string (id) or an object
                      load(request.responseText);
                  } else {
                      // Upload failed
                      progressAPI.update({
                        message: `‚ùå Failed to upload <em>${file.name}</em>. Please try again.`,
                        style: 'error',
                        buttons: [
                          {
                            text: 'Retry',
                            style: 'danger',
                            onclick: () => {
                              // Reset and retry
                              progressAPI.update({
                                message: '‚è≥ Retrying upload...',
                                style: 'default',
                                buttons: []
                              });
                              pond.processFile(file);
                            }
                          },
                          {
                            text: 'Cancel',
                            style: 'secondary',
                            onclick: () => {
                              pond.removeFiles();
                              progressAPI.hide();
                            }
                          }
                        ]
                      });
                      
                      // Can call the error method if something is wrong, should exit after
                      error('Upload failed');
                  }
              };

              request.send(formData);

              // Should expose an abort method so the request can be cancelled
              return {
                  abort: () => {
                      // This function is entered if the user has tapped the cancel button
                      request.abort();
                      
                      // Update progress message
                      progressAPI.update({
                        message: 'üö´ Upload cancelled by user. ',
                        style: 'warning',
                        buttons: [
                          {
                            text: 'Try Again',
                            style: 'primary',
                            onclick: () => {
                              progressAPI.hide();
                            }
                          }
                        ]
                      });

                      // Let FilePond know the request has been cancelled
                      abort();
                  },
              };
          },
        },
        labelIdle: 'Drag & Drop your file or <span class="filepond--label-action"> Browse </span>',
        labelFileProcessing: 'Processing...',
        labelFileProcessingComplete: 'Done!'
      });
      
      // FilePond event listeners for progress updates
      pond.on('addfile', (error, file) => {
        if (!error) {
          progressAPI.update({
            message: `üìÅ File <em>"${file.file.name}"</em> added. Ready to upload... `,
            style: 'default',
            buttons: []
          });
        }
      });
      
      pond.on('processfilestart', (file) => {
        progressAPI.update({
          message: `‚è≥ Starting upload of <em>${file.file.name}</em>...`,
          style: 'default',
          buttons: []
        });
      });
      
      pond.on('removefile', (error, file) => {
        if (!error) {
          progressAPI.hide();
        }
      });
    </script> 
  </body>
</html>
